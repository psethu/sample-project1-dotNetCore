Thoughts:
1.hired attribute
Q:For "hired" attrbute, whether to createa a optional Cab versus mandatory Cab relation for a driver.
A:mandatory Cab with hired attribute bceause I assume a driver is always with a cab and is responsble for it

2.Business logic layer
Model is known to simply represent equivalent database table. Heavy logic may need to be kept in a Business logics layer. For example,
instead of the application performing the CalculateFare, we could have this be performed in the database.

Envisioning this database design:
---
TaxiCab
TaxiDriver
TaxiRide
TaxiFare
TaxiPassenger
TaxiSurcharge

In detail
---
TaxiCab
Base entity to link a TaxiDriver for "hired" attribute
-has one TaxiDriver (option)
*Relationship between taxi driver and taxi cab needed to record a history between these two entities

TaxiDriver
Base entity
-has many TaxiRide
-has one TaxiCab (optionally)
*Will have boolean to indicate "hired". In future may want separate entity TaxiCab and place hired boolean on TaxiCab instead

TaxiRide
Link entity between a taxi driver and taxi passenger
-has one TaxiDriver
-has one TaxiFare
*In database, this table would have 2 foreign keys: TaxiDriver_FK, TaxiPassenger_FK

TaxiFare
Link entity to TaxiRide. Provides fare details of a taxi ride
-has one TaxiRide

TaxiPassenger
Base entity
-has many TaxiRide

TaxiSurcharge
-Added to support Composition design because a TaxiFare is composed of many surcharges. 